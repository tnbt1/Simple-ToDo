// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  username      String?   @unique
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts Account[]
  sessions Session[]
  tasks    Task[]
  sharedTasks SharedTask[]
  sharedCategories SharedCategory[]
  threadMessages ThreadMessage[]
  taskPermissions TaskPermission[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  dueDate     DateTime?
  priority    Priority @default(MEDIUM)
  status      Status   @default(PENDING)
  completed   Boolean  @default(false)
  position    Int      @default(0)
  tags        String[]
  category    String?
  userId      String
  shareId     String?  @unique
  isShared    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  sharedWith SharedTask[]
  threadMessages ThreadMessage[]
  permissions TaskPermission[]

  @@index([userId])
  @@index([dueDate])
  @@index([priority])
  @@index([status])
  @@index([category])
  @@index([shareId])
}

enum Priority {
  LOW
  MEDIUM
  HIGH
}

enum Status {
  PENDING
  IN_PROGRESS
  COMPLETED
}

// 共有タスクの管理
model SharedTask {
  id          String   @id @default(cuid())
  taskId      String
  sharedById  String
  sharedWithId String
  permission  Permission @default(VIEW)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  sharedBy User @relation(fields: [sharedById], references: [id], onDelete: Cascade)

  @@unique([taskId, sharedWithId])
  @@index([taskId])
  @@index([sharedWithId])
}

// カテゴリーごとの共有
model SharedCategory {
  id          String   @id @default(cuid())
  category    String
  ownerId     String
  sharedWithId String
  permission  Permission @default(VIEW)
  shareId     String   @unique
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)

  @@unique([category, ownerId, sharedWithId])
  @@index([category])
  @@index([ownerId])
  @@index([sharedWithId])
  @@index([shareId])
}

// タスクごとのスレッドメッセージ
model ThreadMessage {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String   @db.Text
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  images ThreadImage[]

  @@index([taskId])
  @@index([userId])
}

// スレッド内の画像
model ThreadImage {
  id          String   @id @default(cuid())
  messageId   String
  url         String
  filename    String
  size        Int
  mimeType    String
  createdAt   DateTime @default(now())

  message ThreadMessage @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@index([messageId])
}

// タスクの権限管理
model TaskPermission {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  permission Permission
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  task Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([taskId, userId])
  @@index([taskId])
  @@index([userId])
}

enum Permission {
  VIEW      // 閲覧のみ
  COMMENT   // コメント可能
  EDIT      // 編集可能
  ADMIN     // 管理者権限（削除・共有設定変更可能）
}